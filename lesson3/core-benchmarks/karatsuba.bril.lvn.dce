@main(x: int, y: int) {
  result: int = call @karatsuba x y;
  print result;
}
@karatsuba(x: int, y: int): int {
  one: int = const 1;
  two: int = const 2;
  base: int = const 10;
  x_digits: int = call @num_digits x;
  y_digits: int = call @num_digits y;
  x_1_digit: bool = eq one x_digits;
  y_1_digit: bool = eq one y_digits;
  cond: bool = or x_1_digit y_1_digit;
  br cond .then .else;
.then:
  result: int = mul x y;
  jmp .end;
.else:
  n: int = call @max x_digits y_digits;
  n2: int = div n two;
  pow_n2: int = call @pow base n2;
  a: int = div x pow_n2;
  b: int = call @mod x pow_n2;
  c: int = div y pow_n2;
  d: int = call @mod y pow_n2;
  z0: int = call @karatsuba b d;
  a_plus_b: int = add a b;
  c_plus_d: int = add c d;
  z1: int = call @karatsuba a_plus_b c_plus_d;
  z2: int = call @karatsuba a c;
  hi_shift_factor: int = mul two n2;
  hi_shift: int = call @pow base hi_shift_factor;
  hi_shifted: int = mul z2 hi_shift;
  mid: int = sub z1 z2;
  mid: int = sub mid z0;
  mid_shifted: int = mul pow_n2 mid;
  result: int = add hi_shifted mid_shifted;
  result: int = add z0 result;
  jmp .end;
.end:
  ret result;
}
@num_digits(n: int): int {
  one: int = const 1;
  base: int = const 10;
  digits: int = id one;
  power: int = id one;
.while.cond:
  temp: int = div n power;
  is_term: bool = lt temp base;
  br is_term .while.finish .while.body;
.while.body:
  digits: int = add digits one;
  power: int = mul power base;
  jmp .while.cond;
.while.finish:
  ret digits;
}
@max(a: int, b: int): int {
  cond: bool = gt a b;
  br cond .then .else;
.then:
  ret a;
.else:
  ret b;
}
@mod(a: int, b: int): int {
  c: int = div a b;
  d: int = mul b c;
  remainder: int = sub a d;
  ret remainder;
}
@pow(x: int, n: int): int {
  v0: int = id x;
  res: int = id v0;
  v2: int = const 0;
  _i: int = id v2;
.for.cond.1:
  v5: int = const 1;
  v6: int = sub n v5;
  v7: bool = lt _i v6;
  br v7 .for.body.1 .for.end.1;
.for.body.1:
  v10: int = mul res x;
  res: int = id v10;
  v12: int = const 1;
  v13: int = add _i v12;
  _i: int = id v13;
  jmp .for.cond.1;
.for.end.1:
  v14: int = id res;
  ret v14;
}

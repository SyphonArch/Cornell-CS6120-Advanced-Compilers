# ARGS: 3 5 10000 4
@pow(x: int, n: int): int {
  v2: int = const 1;
  v3: bool = eq n v2;
  br v3 .then.0 .else.0;
.then.0:
  v4: int = id x;
  ret v4;
.else.0:
  v5: int = id x;
  v7: int = const 2;
  v8: int = div n v7;
  half: int = call @pow v5 v8;
  v11: int = mul half half;
  half2: int = id v11;
  v13: int = id n;
  v14: int = const 2;
  v15: int = call @mod v13 v14;
  v16: int = const 1;
  v17: bool = eq v16 v15;
  br v17 .then.12 .else.12;
.then.12:
  v20: int = mul half2 x;
  ans: int = id v20;
  jmp .endif.12;
.else.12:
  v21: int = id half2;
  ans: int = id v21;
.endif.12:
  v22: int = id ans;
  ret v22;
}
@mod(a: int, b: int): int {
  v3: int = div a b;
  v5: int = mul b v3;
  v6: int = sub a v5;
  ret v6;
}
@LEFTSHIFT(x: int, step: int): int {
  v0: int = const 2;
  v1: int = id step;
  p: int = call @pow v0 v1;
  v4: int = mul p x;
  ret v4;
}
@RIGHTSHIFT(x: int, step: int): int {
  v0: int = const 2;
  v1: int = id step;
  p: int = call @pow v0 v1;
  v4: int = div x p;
  ret v4;
}
@main(a: int, b: int, c: int, d: int) {
  v2: int = id a;
  v3: int = id b;
  ans1: int = call @LEFTSHIFT v2 v3;
  print ans1;
  v4: int = id c;
  v5: int = id d;
  ans2: int = call @RIGHTSHIFT v4 v5;
  print ans2;
}
